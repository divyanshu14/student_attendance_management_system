# Generated by Django 3.0.3 on 2020-04-03 16:03

import database_manager.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', database_manager.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('class_event_type', models.CharField(choices=[('L', 'Lecture'), ('T', 'Tutorial'), ('P', 'Practical')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='ClassEventCoordinator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('relative_attendance_for_one_lecture', models.IntegerField()),
                ('relative_attendance_for_one_tutorial', models.IntegerField()),
                ('relative_attendance_for_one_practical', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TeachingAssistant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teaching_assistant_id', models.CharField(max_length=15, unique=True)),
                ('class_event_coordinator', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='database_manager.ClassEventCoordinator')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_number', models.CharField(max_length=15, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructor_id', models.CharField(max_length=15, unique=True)),
                ('class_event_coordinator', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='database_manager.ClassEventCoordinator')),
            ],
        ),
        migrations.CreateModel(
            name='CumulativeAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('was_present_last_class', models.BooleanField()),
                ('total_lectures', models.IntegerField()),
                ('total_tutorials', models.IntegerField()),
                ('total_practicals', models.IntegerField()),
                ('total_lectures_present', models.IntegerField()),
                ('total_tutorials_present', models.IntegerField()),
                ('total_practicals_present', models.IntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_manager.Course')),
                ('last_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_manager.ClassEvent')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_manager.Student')),
            ],
            options={
                'verbose_name_plural': 'Cumulative Attendance',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='instructors',
            field=models.ManyToManyField(to='database_manager.Instructor'),
        ),
        migrations.AddField(
            model_name='course',
            name='registered_students',
            field=models.ManyToManyField(blank=True, to='database_manager.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='teaching_assistants',
            field=models.ManyToManyField(blank=True, to='database_manager.TeachingAssistant'),
        ),
        migrations.AddField(
            model_name='classevent',
            name='attendance_taken_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_manager.ClassEventCoordinator'),
        ),
        migrations.AddField(
            model_name='classevent',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_manager.Course'),
        ),
        migrations.AddField(
            model_name='classevent',
            name='present_students',
            field=models.ManyToManyField(blank=True, to='database_manager.Student'),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_id', models.CharField(max_length=15, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='cumulativeattendance',
            constraint=models.UniqueConstraint(fields=('student', 'course'), name='Unique Student Registration in Course'),
        ),
    ]
